-- VIEW
--기존의 테이블은 그대로 놔둔채 필요한 컬럼들 및 새로운 컬럼을 만든 가상 테이블.
--실제 데이터가 저장되는 것은 아니지만 VIEW를 통해서 데이터를 관리할 수 있다.

--독립성: 다른 곳에서 변경하지 못하도록 설정
--편리성: 긴 쿼리문(조건식)을 짦게 사용가능
--보안성: 짦게 만들기 때문에 기준의 쿼리는 보이지 않는다.

--특징 
--1. 뷰가 정의된 기본테이블이 변경 되면, 뷰도 자동적으로 변경 됩니다.
--2. 외부 스키마는 뷰와 기본 테이블 정의로 구성됩니다.
--3. 뷰에 대한 검색은 기본테이블과 거의 동일하지만 삽입, 삭제, 갱신은 제약을 받게 됩니다.
--4. DBA 는 보안측면에서 뷰를 활용할수 있습니다.
--5. 뷰는 CREATE문에 의해 정의 되며 SYSVIEW에 저장됩니다.
--6. 한번 정의된 뷰는 변경할수 없으며, 삭제한 후에 다시 생성해야 합니다.
--7. 뷰의 정의는 ALTER 문을 이용하여 변경할수 없습니다.
--8. 뷰를 제거 할때에는 DROP 문을 사용합니다.

--장점
--1. 논리적 독립성을 제공합니다.
--2. 데이터 접근 제어로 보안 가능합니다.
--  - 뷰를 통해 접근하기 때문에 뷰에 나타나지 않는 데이터를 보호 할수 있습니다.
--3. 사용자의 데이터 관리를 간단하게 합니다.
--4. 하나의 테이블로 여러개의 상이한 뷰를 정의할수 있습니다.

--단점
--1. 독자적인 인덱스를 가질수 없습니다.
--2. 정의를 변경할수 없습니다.
--3. 삽입, 삭제, 갱신 연산에 많은 제약이 따릅니다.


CREATE VIEW PLAYER_AGE
AS(SELECT ROUND((SYSDATE - BIRTH_DATE) / 365) AGE, P.* FROM PLAYER P);

SELECT * FROM PLAYER_AGE;
DROP VIEW PLAYER_AGE;

--30살이 넘는 선수 검색
SELECT * FROM PLAYER_AGE WHERE AGE > 30;
